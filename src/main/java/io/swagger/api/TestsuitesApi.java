/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.TestSuite;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-30T21:24:04.222Z")

@Api(value = "testsuites", description = "the testsuites API")
public interface TestsuitesApi {

    @ApiOperation(value = "List All TestSuites", nickname = "testsuitesGet", notes = "", response = TestSuite.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Response", response = TestSuite.class, responseContainer = "List") })
    @RequestMapping(value = "/testsuites",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<TestSuite>> testsuitesGet();


    @ApiOperation(value = "Delete a TestSuite", nickname = "testsuitesIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "TestSuite deleted") })
    @RequestMapping(value = "/testsuites/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> testsuitesIdDelete(@ApiParam(value = "ID of the TestSuite to be deleted",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Find a TestSuite", nickname = "testsuitesIdGet", notes = "", response = TestSuite.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "TestSuite found", response = TestSuite.class) })
    @RequestMapping(value = "/testsuites/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<TestSuite> testsuitesIdGet(@ApiParam(value = "ID of the TestSuite to find",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Update a TestSuite", nickname = "testsuitesIdPut", notes = "", response = TestSuite.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "TestSuite updated", response = TestSuite.class) })
    @RequestMapping(value = "/testsuites/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<TestSuite> testsuitesIdPut(@ApiParam(value = "ID of the TestSuite to update",required=true) @PathVariable("id") Long id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody TestSuite body);


    @ApiOperation(value = "Create a TestSuite (report test results)", nickname = "testsuitesPost", notes = "", response = TestSuite.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "TestSuite created", response = TestSuite.class) })
    @RequestMapping(value = "/testsuites",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<TestSuite> testsuitesPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody TestSuite body);

}
