/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Project;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-30T21:24:04.222Z")

@Api(value = "projects", description = "the projects API")
public interface ProjectsApi {

    @ApiOperation(value = "List All Projects", nickname = "projectsGet", notes = "", response = Project.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Response", response = Project.class, responseContainer = "List") })
    @RequestMapping(value = "/projects",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Project>> projectsGet();


    @ApiOperation(value = "Delete a Project", nickname = "projectsIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Project deleted") })
    @RequestMapping(value = "/projects/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> projectsIdDelete(@ApiParam(value = "ID of a project to be deleted",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Find a Project", nickname = "projectsIdGet", notes = "", response = Project.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Project found", response = Project.class) })
    @RequestMapping(value = "/projects/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Project> projectsIdGet(@ApiParam(value = "ID of a project to find",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Update a Project", nickname = "projectsIdPut", notes = "", response = Project.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Project updated", response = Project.class) })
    @RequestMapping(value = "/projects/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Project> projectsIdPut(@ApiParam(value = "ID of a project to update",required=true) @PathVariable("id") Long id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Project body);


    @ApiOperation(value = "Create a New Project", nickname = "projectsPost", notes = "", response = Project.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Project created", response = Project.class) })
    @RequestMapping(value = "/projects",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Project> projectsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Project body);

}
